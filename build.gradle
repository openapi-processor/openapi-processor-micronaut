plugins {
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id "com.github.ben-manes.versions" version "0.42.0"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group projectGroupId
version projectVersion

ext {
    processorApiVersion = '2021.1'
    processorCoreVersion = '2022.5'
    processorTestVersion = '2022.2'
}

repositories {
    mavenLocal ()
    mavenCentral ()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

testing {
    suites {
        test {
            useJUnitJupiter('5.8.2')
        }

        testInt(JvmTestSuite) {
            useJUnitJupiter('5.8.2')
            testType = TestSuiteType.INTEGRATION_TEST

            dependencies {
                implementation project
            }

            sources {
                java {
                    srcDirs = ['src/testInt/kotlin']
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.testInt)
}

sourceSets {
  main {
    java {
        srcDirs "${buildDir}/version"
    }
  }
}

java {
    withJavadocJar ()
    withSourcesJar ()
}

compileKotlin.dependsOn "generateVersion"

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.named('compileKotlin') {
    dependsOn 'generateVersion'

    kotlinOptions.jvmTarget = "1.8"
}

tasks.named('sourcesJar') {
    dependsOn 'generateVersion'
}

dependencies {
    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.6.21")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.3")

    implementation "io.openapiprocessor:openapi-processor-core:$processorCoreVersion"
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation ('com.google.guava:guava:31.1-jre')

    testImplementation ("io.openapiprocessor:openapi-processor-api:$processorApiVersion")
    testImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")
    testImplementation platform("org.codehaus.groovy:groovy-bom:3.0.10")
    testImplementation ("org.codehaus.groovy:groovy")
    testImplementation ("org.codehaus.groovy:groovy-nio")
    testImplementation ('org.spockframework:spock-core:2.0-groovy-3.0')
    testImplementation("io.mockk:mockk:1.12.4")
    testImplementation("io.kotest:kotest-runner-junit5:5.3.0")
    testImplementation 'ch.qos.logback:logback-classic:1.2.11'
    testImplementation("com.google.jimfs:jimfs:1.2")

    testIntImplementation ("io.openapiprocessor:openapi-processor-api:$processorApiVersion")
    testIntImplementation ("io.openapiprocessor:openapi-processor-core:$processorCoreVersion")
    testIntImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")
    testIntImplementation platform("org.codehaus.groovy:groovy-bom:3.0.10")
    testIntImplementation ("org.codehaus.groovy:groovy")
    testIntImplementation ("org.codehaus.groovy:groovy-nio")
    testIntImplementation ('org.spockframework:spock-core:2.0-groovy-3.0')
    testIntImplementation("io.mockk:mockk:1.12.4")
    testIntImplementation("io.kotest:kotest-runner-junit5:5.3.0")
    testIntImplementation 'ch.qos.logback:logback-classic:1.2.11'
    testIntImplementation("com.google.jimfs:jimfs:1.2")
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate: $v"
        return v.endsWith ("-M1") || v.contains ("alpha") || v.contains ("beta")
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}


jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-micronaut"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
