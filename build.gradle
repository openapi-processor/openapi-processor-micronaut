import io.openapiprocessor.KotlinPlatformRule

plugins {
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'org.jetbrains.dokka' version '1.6.10'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id "com.github.ben-manes.versions" version "0.41.0"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group projectGroupId
version projectVersion

String getBuildProperty(String property) {
    project.findProperty (property) ?: System.getenv (property) ?: 'n/a'
}

String getBuildSignKey(String property) {
    project.findProperty (property) ?:
        System.getenv (property) ? System.getenv (property).replace("\\n", "\n"): 'n/a'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


ext {
    processorApiVersion = '2021.1'
    processorCoreVersion = '2022.4.1'
    processorTestVersion = '2022.1'

    publishUser = getBuildProperty ('PUBLISH_USER')
    publishKey =  getBuildProperty ('PUBLISH_KEY')

    signKey = getBuildSignKey ('SIGN_KEY')
    signPwd = getBuildProperty ('SIGN_PWD')

    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

sourceSets {
  main {
    java {
        srcDirs "${buildDir}/version"
    }
  }
}

compileKotlin.dependsOn "generateVersion"

tasks.withType(Test) {
    useJUnitPlatform()
}

testSets {
    testInt
}

check.dependsOn testInt

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.6.10")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.1")

    implementation "io.openapiprocessor:openapi-processor-core:$processorCoreVersion"
    implementation 'org.slf4j:slf4j-api:1.7.35'
    implementation ('com.google.guava:guava:31.0.1-jre')

    testImplementation ("io.openapiprocessor:openapi-processor-api:$processorApiVersion")
    testImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")

    testImplementation platform("org.codehaus.groovy:groovy-bom:3.0.9")
    testImplementation ("org.codehaus.groovy:groovy")
    testImplementation ("org.codehaus.groovy:groovy-nio")
    testImplementation ('org.spockframework:spock-core:2.0-groovy-3.0')
    testImplementation platform("org.junit:junit-bom:5.8.2")
    testImplementation ("org.junit.jupiter:junit-jupiter-api")
    testImplementation ("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.mockk:mockk:1.12.2")
    testImplementation("io.kotest:kotest-runner-junit5:5.1.0")
    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation("com.google.jimfs:jimfs:1.2")
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate: $v"
        return v.endsWith ("-M1") || v.contains ("alpha") || v.contains ("beta")
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}


jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set ('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [dokkaHtml]) {
    archiveClassifier.set ('javadoc')
    from "$buildDir/docs"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dokkaHtml {
    outputDirectory = file("$buildDir/docs/kotlin".toString ())
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-micronaut"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

nexusPublishing {
    repositories {
        sonatype() {
            username = publishUser
            password = publishKey
        }
    }
}

apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
